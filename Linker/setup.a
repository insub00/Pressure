;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2014-10-02
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega2560
;Program type            : Application
;AVR Core Clock frequency: 7.372800 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 2048
;*****************************************************/
;
;#include "hwdefine.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;volatile unsigned char QueueData[QUEUE_SIZE];
;volatile unsigned int QueueFirst = 0;
;volatile unsigned int QueueLast = 0;
;volatile unsigned char CommCommandBuffer[COMMAND_BUFFER_SIZE];
;volatile unsigned int CommCommandSize = 0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 0022 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0023 char status,data;
; 0000 0024 status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0025 data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0026 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0027 	{
; 0000 0028 	QueueData[QueueLast] = data;
;PCODE: $00000018 VOL: 1
;PCODE: $00000019 VOL: 1
;PCODE: $0000001A VOL: 0
; 0000 0029 	if (++QueueLast >= QUEUE_SIZE) QueueLast = 0;
;PCODE: $0000001B VOL: 1
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 1
; 0000 002A 	}
;PCODE: $00000023 VOL: 0
; 0000 002B }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0000 002F {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0030 char status,data;
; 0000 0031 status=UCSR1A;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0032 data=UDR1;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0033 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0034 	{
; 0000 0035 
; 0000 0036 	}
; 0000 0037 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;volatile unsigned char bMainStart = 0;
;volatile unsigned char bHalfMainStart = 0;
;volatile unsigned int IntCount = 0;
;volatile unsigned char bBlink = 0;
;
;volatile unsigned char Key = 0;
;volatile unsigned char ExtKey = 0;
;volatile unsigned char Sensor = 0;
;volatile unsigned char Emo = 0;
;
;volatile unsigned char NewKey = 0;
;volatile unsigned char NewExtKey = 0;
;volatile unsigned char NewSensor = 0;
;volatile unsigned char NewEmo = 0;
;volatile unsigned char OldKey = 0;
;volatile unsigned char OldExtKey = 0;
;volatile unsigned char OldSensor = 0;
;volatile unsigned char OldEmo = 0;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0051 {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0052 	// Reinitialize Timer 0 value
; 0000 0053 	TCNT0=0x8E;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0054 	// Place your code here
; 0000 0055 
; 0000 0056     TickCount++;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0057 	// 1ms Routine
; 0000 0058 
; 0000 0059 	if (++IntCount >= 500)
;PCODE: $00000041 VOL: 1
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 005A     {
; 0000 005B     	bHalfMainStart = 1;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 1
; 0000 005C         IntCount = 0;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 1
; 0000 005D     }
; 0000 005E 
; 0000 005F     if ((IntCount % 10) == 0)	// 10ms
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 1
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0060     {
; 0000 0061 		NewKey = KeyIn();
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 1
; 0000 0062 		if(NewKey == OldKey) Key = NewKey;
;PCODE: $00000055 VOL: 1
;PCODE: $00000056 VOL: 1
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 1
;PCODE: $0000005A VOL: 1
; 0000 0063 		OldKey = NewKey;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 1
;PCODE: $0000005D VOL: 1
; 0000 0064 
; 0000 0065 		NewSensor = SensorIn();
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 1
; 0000 0066 		if(NewSensor == OldSensor) Sensor = NewSensor;
;PCODE: $00000062 VOL: 1
;PCODE: $00000063 VOL: 1
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 1
;PCODE: $00000067 VOL: 1
; 0000 0067 		OldSensor = NewSensor;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 1
;PCODE: $0000006A VOL: 1
; 0000 0068 
; 0000 0069 		NewExtKey = ExtKeyIn();
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 1
; 0000 006A 		if(NewExtKey == OldExtKey) ExtKey = NewExtKey;
;PCODE: $0000006F VOL: 1
;PCODE: $00000070 VOL: 1
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 1
;PCODE: $00000074 VOL: 1
; 0000 006B 		OldExtKey = NewExtKey;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 1
;PCODE: $00000077 VOL: 1
; 0000 006C 
; 0000 006D 		NewEmo = EmoIn();
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 1
; 0000 006E 		if(NewEmo == OldEmo) Emo = NewEmo;
;PCODE: $0000007C VOL: 1
;PCODE: $0000007D VOL: 1
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 1
;PCODE: $00000081 VOL: 1
; 0000 006F 		OldEmo = NewEmo;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 1
;PCODE: $00000084 VOL: 1
; 0000 0070 
; 0000 0071     	bMainStart = 1;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 1
; 0000 0072 	}
; 0000 0073 }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0078 {
;PCODE: $0000008B VOL: 0
; 0000 0079 // Declare your local variables here
; 0000 007A 
; 0000 007B // Crystal Oscillator division factor: 1
; 0000 007C #pragma optsize-
; 0000 007D CLKPR=0x80;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 007E CLKPR=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 007F #ifdef _OPTIMIZE_SIZE_
; 0000 0080 #pragma optsize+
; 0000 0081 #endif
; 0000 0082 
; 0000 0083 // Input/Output Ports initialization
; 0000 0084 // Port A initialization
; 0000 0085 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
; 0000 0086 // State7=1 State6=1 State5=1 State4=1 State3=0 State2=1 State1=1 State0=1
; 0000 0087 PORTA=0xF7;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0088 DDRA=0xFB;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0089 
; 0000 008A // Port B initialization
; 0000 008B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 008C // State7=P State6=P State5=P State4=P State3=P State2=P State1=P State0=P
; 0000 008D PORTB=0xFF;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 008E DDRB=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 008F 
; 0000 0090 // Port C initialization
; 0000 0091 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0092 // State7=P State6=P State5=P State4=P State3=P State2=P State1=P State0=P
; 0000 0093 PORTC=0xFF;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0094 DDRC=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0095 
; 0000 0096 // Port D initialization
; 0000 0097 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=In Func1=In Func0=In
; 0000 0098 // State7=P State6=P State5=P State4=P State3=1 State2=P State1=P State0=P
; 0000 0099 PORTD=0xFF;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 009A DDRD=0x08;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 009B 
; 0000 009C // Port E initialization
; 0000 009D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 009E // State7=P State6=P State5=P State4=P State3=P State2=P State1=1 State0=P
; 0000 009F PORTE=0xFF;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00A0 DDRE=0x02;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00A1 
; 0000 00A2 // Port F initialization
; 0000 00A3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A4 // State7=P State6=P State5=P State4=P State3=P State2=P State1=P State0=P
; 0000 00A5 PORTF=0xFF;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00A6 DDRF=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00A7 
; 0000 00A8 // Port G initialization
; 0000 00A9 // Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00AA // State5=P State4=P State3=P State2=P State1=P State0=P
; 0000 00AB PORTG=0x3F;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00AC DDRG=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00AD 
; 0000 00AE // Port H initialization
; 0000 00AF // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00B0 // State7=1 State6=1 State5=1 State4=1 State3=1 State2=1 State1=1 State0=1
; 0000 00B1 PORTH=0xFF;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00B2 DDRH=0xFF;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00B3 
; 0000 00B4 // Port J initialization
; 0000 00B5 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00B6 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 00B7 PORTJ=0x00;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00B8 DDRJ=0xFF;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00B9 
; 0000 00BA // Port K initialization
; 0000 00BB // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00BC // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 00BD PORTK=0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00BE DDRK=0xFF;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00BF 
; 0000 00C0 // Port L initialization
; 0000 00C1 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00C2 // State7=P State6=P State5=P State4=P State3=P State2=P State1=P State0=P
; 0000 00C3 PORTL=0xFF;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00C4 DDRL=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00C5 
; 0000 00C6 // Timer/Counter 0 initialization
; 0000 00C7 // Clock source: System Clock
; 0000 00C8 // Clock value: 115.200 kHz
; 0000 00C9 // Mode: Normal top=0xFF
; 0000 00CA // OC0A output: Disconnected
; 0000 00CB // OC0B output: Disconnected
; 0000 00CC TCCR0A=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00CD TCCR0B=0x03;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00CE TCNT0=0x8E;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00CF OCR0A=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00D0 OCR0B=0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00D1 
; 0000 00D2 // Timer/Counter 1 initialization
; 0000 00D3 // Clock source: System Clock
; 0000 00D4 // Clock value: Timer1 Stopped
; 0000 00D5 // Mode: Normal top=0xFFFF
; 0000 00D6 // OC1A output: Discon.
; 0000 00D7 // OC1B output: Discon.
; 0000 00D8 // OC1C output: Discon.
; 0000 00D9 // Noise Canceler: Off
; 0000 00DA // Input Capture on Falling Edge
; 0000 00DB // Timer1 Overflow Interrupt: Off
; 0000 00DC // Input Capture Interrupt: Off
; 0000 00DD // Compare A Match Interrupt: Off
; 0000 00DE // Compare B Match Interrupt: Off
; 0000 00DF // Compare C Match Interrupt: Off
; 0000 00E0 TCCR1A=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00E1 TCCR1B=0x00;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00E2 TCNT1H=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00E3 TCNT1L=0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00E4 ICR1H=0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00E5 ICR1L=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00E6 OCR1AH=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00E7 OCR1AL=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00E8 OCR1BH=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00E9 OCR1BL=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00EA OCR1CH=0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00EB OCR1CL=0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00EC 
; 0000 00ED // Timer/Counter 2 initialization
; 0000 00EE // Clock source: System Clock
; 0000 00EF // Clock value: Timer2 Stopped
; 0000 00F0 // Mode: Normal top=0xFF
; 0000 00F1 // OC2A output: Disconnected
; 0000 00F2 // OC2B output: Disconnected
; 0000 00F3 ASSR=0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00F4 TCCR2A=0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00F5 TCCR2B=0x00;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00F6 TCNT2=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00F7 OCR2A=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00F8 OCR2B=0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00F9 
; 0000 00FA // Timer/Counter 3 initialization
; 0000 00FB // Clock source: System Clock
; 0000 00FC // Clock value: Timer3 Stopped
; 0000 00FD // Mode: Normal top=0xFFFF
; 0000 00FE // OC3A output: Discon.
; 0000 00FF // OC3B output: Discon.
; 0000 0100 // OC3C output: Discon.
; 0000 0101 // Noise Canceler: Off
; 0000 0102 // Input Capture on Falling Edge
; 0000 0103 // Timer3 Overflow Interrupt: Off
; 0000 0104 // Input Capture Interrupt: Off
; 0000 0105 // Compare A Match Interrupt: Off
; 0000 0106 // Compare B Match Interrupt: Off
; 0000 0107 // Compare C Match Interrupt: Off
; 0000 0108 TCCR3A=0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0109 TCCR3B=0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 010A TCNT3H=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 010B TCNT3L=0x00;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 010C ICR3H=0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 010D ICR3L=0x00;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 010E OCR3AH=0x00;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 010F OCR3AL=0x00;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0110 OCR3BH=0x00;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0111 OCR3BL=0x00;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0112 OCR3CH=0x00;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0113 OCR3CL=0x00;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0114 
; 0000 0115 // Timer/Counter 4 initialization
; 0000 0116 // Clock source: System Clock
; 0000 0117 // Clock value: Timer4 Stopped
; 0000 0118 // Mode: Normal top=0xFFFF
; 0000 0119 // OC4A output: Discon.
; 0000 011A // OC4B output: Discon.
; 0000 011B // OC4C output: Discon.
; 0000 011C // Noise Canceler: Off
; 0000 011D // Input Capture on Falling Edge
; 0000 011E // Timer4 Overflow Interrupt: Off
; 0000 011F // Input Capture Interrupt: Off
; 0000 0120 // Compare A Match Interrupt: Off
; 0000 0121 // Compare B Match Interrupt: Off
; 0000 0122 // Compare C Match Interrupt: Off
; 0000 0123 TCCR4A=0x00;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0124 TCCR4B=0x00;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0125 TCNT4H=0x00;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0126 TCNT4L=0x00;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0127 ICR4H=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0128 ICR4L=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0129 OCR4AH=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 012A OCR4AL=0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 012B OCR4BH=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 012C OCR4BL=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 012D OCR4CH=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 012E OCR4CL=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 012F 
; 0000 0130 // Timer/Counter 5 initialization
; 0000 0131 // Clock source: System Clock
; 0000 0132 // Clock value: Timer5 Stopped
; 0000 0133 // Mode: Normal top=0xFFFF
; 0000 0134 // OC5A output: Discon.
; 0000 0135 // OC5B output: Discon.
; 0000 0136 // OC5C output: Discon.
; 0000 0137 // Noise Canceler: Off
; 0000 0138 // Input Capture on Falling Edge
; 0000 0139 // Timer5 Overflow Interrupt: Off
; 0000 013A // Input Capture Interrupt: Off
; 0000 013B // Compare A Match Interrupt: Off
; 0000 013C // Compare B Match Interrupt: Off
; 0000 013D // Compare C Match Interrupt: Off
; 0000 013E TCCR5A=0x00;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 013F TCCR5B=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0140 TCNT5H=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0141 TCNT5L=0x00;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0142 ICR5H=0x00;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0143 ICR5L=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0144 OCR5AH=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0145 OCR5AL=0x00;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0146 OCR5BH=0x00;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0147 OCR5BL=0x00;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0148 OCR5CH=0x00;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0149 OCR5CL=0x00;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 014A 
; 0000 014B // External Interrupt(s) initialization
; 0000 014C // INT0: Off
; 0000 014D // INT1: Off
; 0000 014E // INT2: Off
; 0000 014F // INT3: Off
; 0000 0150 // INT4: Off
; 0000 0151 // INT5: Off
; 0000 0152 // INT6: Off
; 0000 0153 // INT7: Off
; 0000 0154 EICRA=0x00;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0155 EICRB=0x00;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0156 EIMSK=0x00;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0157 // PCINT0 interrupt: Off
; 0000 0158 // PCINT1 interrupt: Off
; 0000 0159 // PCINT2 interrupt: Off
; 0000 015A // PCINT3 interrupt: Off
; 0000 015B // PCINT4 interrupt: Off
; 0000 015C // PCINT5 interrupt: Off
; 0000 015D // PCINT6 interrupt: Off
; 0000 015E // PCINT7 interrupt: Off
; 0000 015F // PCINT8 interrupt: Off
; 0000 0160 // PCINT9 interrupt: Off
; 0000 0161 // PCINT10 interrupt: Off
; 0000 0162 // PCINT11 interrupt: Off
; 0000 0163 // PCINT12 interrupt: Off
; 0000 0164 // PCINT13 interrupt: Off
; 0000 0165 // PCINT14 interrupt: Off
; 0000 0166 // PCINT15 interrupt: Off
; 0000 0167 // PCINT16 interrupt: Off
; 0000 0168 // PCINT17 interrupt: Off
; 0000 0169 // PCINT18 interrupt: Off
; 0000 016A // PCINT19 interrupt: Off
; 0000 016B // PCINT20 interrupt: Off
; 0000 016C // PCINT21 interrupt: Off
; 0000 016D // PCINT22 interrupt: Off
; 0000 016E // PCINT23 interrupt: Off
; 0000 016F PCMSK0=0x00;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0170 PCMSK1=0x00;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0171 PCMSK2=0x00;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0172 PCICR=0x00;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0173 
; 0000 0174 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0175 TIMSK0=0x01;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0176 
; 0000 0177 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0178 TIMSK1=0x00;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0179 
; 0000 017A // Timer/Counter 2 Interrupt(s) initialization
; 0000 017B TIMSK2=0x00;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 017C 
; 0000 017D // Timer/Counter 3 Interrupt(s) initialization
; 0000 017E TIMSK3=0x00;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 017F 
; 0000 0180 // Timer/Counter 4 Interrupt(s) initialization
; 0000 0181 TIMSK4=0x00;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0182 
; 0000 0183 // Timer/Counter 5 Interrupt(s) initialization
; 0000 0184 TIMSK5=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0185 
; 0000 0186 // USART0 initialization
; 0000 0187 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0188 // USART0 Receiver: On
; 0000 0189 // USART0 Transmitter: On
; 0000 018A // USART0 Mode: Asynchronous
; 0000 018B // USART0 Baud Rate: 115200
; 0000 018C UCSR0A=0x00;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 018D UCSR0B=0x98;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 018E UCSR0C=0x06;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 018F UBRR0H=0x00;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0190 UBRR0L=0x03;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0191 
; 0000 0192 // USART1 initialization
; 0000 0193 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0194 // USART1 Receiver: On
; 0000 0195 // USART1 Transmitter: On
; 0000 0196 // USART1 Mode: Asynchronous
; 0000 0197 // USART1 Baud Rate: 115200
; 0000 0198 UCSR1A=0x00;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0199 UCSR1B=0x98;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 019A UCSR1C=0x06;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 019B UBRR1H=0x00;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 019C UBRR1L=0x03;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 019D 
; 0000 019E // USART2 initialization
; 0000 019F // USART2 disabled
; 0000 01A0 UCSR2B=0x00;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 01A1 
; 0000 01A2 // USART3 initialization
; 0000 01A3 // USART3 disabled
; 0000 01A4 UCSR3B=0x00;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 01A5 
; 0000 01A6 // Analog Comparator initialization
; 0000 01A7 // Analog Comparator: Off
; 0000 01A8 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01A9 ACSR=0x80;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 01AA ADCSRB=0x00;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 01AB DIDR1=0x00;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 01AC 
; 0000 01AD // ADC initialization
; 0000 01AE // ADC disabled
; 0000 01AF ADCSRA=0x00;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 01B0 
; 0000 01B1 // SPI initialization
; 0000 01B2 // SPI disabled
; 0000 01B3 SPCR=0x00;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 01B4 
; 0000 01B5 // TWI initialization
; 0000 01B6 // TWI disabled
; 0000 01B7 TWCR=0x00;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 01B8 
; 0000 01B9 // Alphanumeric LCD initialization
; 0000 01BA // Connections specified in the
; 0000 01BB // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 01BC // RS - PORTA Bit 7
; 0000 01BD // RD - PORTA Bit 6
; 0000 01BE // EN - PORTA Bit 5
; 0000 01BF // D4 - PORTH Bit 4
; 0000 01C0 // D5 - PORTH Bit 5
; 0000 01C1 // D6 - PORTH Bit 6
; 0000 01C2 // D7 - PORTH Bit 7
; 0000 01C3 // Characters/line: 24
; 0000 01C4 //lcd_init(24);
; 0000 01C5 
; 0000 01C6 // Global enable interrupts
; 0000 01C7 #asm("sei")
;PCODE: $00000170 VOL: 0
	sei
;PCODE: $00000171 VOL: 0
; 0000 01C8 
; 0000 01C9     HwInit();
;PCODE: $00000172 VOL: 0
; 0000 01CA 
; 0000 01CB     while (1)
;PCODE: $00000173 VOL: 0
; 0000 01CC     {
; 0000 01CD         // Place your code here
; 0000 01CE         CommSubroutine();
;PCODE: $00000174 VOL: 0
; 0000 01CF 
; 0000 01D0 		if (bMainStart)	// 10ms Routine
;PCODE: $00000175 VOL: 1
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 01D1 		{
; 0000 01D2 			bMainStart = 0;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 1
; 0000 01D3 
; 0000 01D4             UserMain();
;PCODE: $0000017A VOL: 0
; 0000 01D5 		}
; 0000 01D6 
; 0000 01D7 		if (bHalfMainStart)	// 500ms Routine
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 1
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 01D8 		{
; 0000 01D9 			bHalfMainStart = 0;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 1
; 0000 01DA 			bBlink = !bBlink;
;PCODE: $00000181 VOL: 1
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 1
; 0000 01DB 
; 0000 01DC             HalfSecMain();
;PCODE: $00000184 VOL: 0
; 0000 01DD         }
; 0000 01DE     }
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 01DF }
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
